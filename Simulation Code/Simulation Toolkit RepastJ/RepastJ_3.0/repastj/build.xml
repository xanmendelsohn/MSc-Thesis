<!-- ========================================================== -->
<!-- Adapted from the buildfile for the data visualization      -->
<!-- library prefuse http://prefuse.sf.net                      -->
<!-- ========================================================== -->

<project name="repast" default="usage" basedir=".">

	<!-- =================================================================== -->
	<!-- Initialization target                                               -->
	<!-- =================================================================== -->
	<target name="init">
		<tstamp />
		<property name="Name" value="RepastJ" />
		<property name="name" value="repastj" />
		<property name="version" value="3.0" />
		<property name="year" value="2004" />

		<property name="build.compiler" value="modern" />
		<property name="debug" value="off" />
		<property name="optimize" value="on" />
		<property name="deprecation" value="on" />
		<property name="packages" value="layout.*,uchicago.src.*,anl.repast.*" />

		<!-- Define the source directories -->
		<property name="root.dir" value="${basedir}" />
		<property name="doc.dir" value="${root.dir}/docs" />
		<property name="lib.dir" value="${root.dir}/lib" />
		<property name="license.dir" value="${root.dir}/licenses" />
		<property name="src.dir" value="${root.dir}/src" />
		<property name="ext.dir" value="${root.dir}/extensions" />
		<property name="demos.dir" value="${root.dir}/demo" />
		<property name="test.dir" value="${root.dir}/test" />

		<!-- Define the source build directories -->
		<property name="build.dir" value="${root.dir}/build" />
		<property name="build.lib" value="${root.dir}/build/lib" />
		<property name="doc.dir" value="${root.dir}/docs" />
		<property name="doc.apidocs" value="${root.dir}/build/docs/api" />
		<property name="build.license" value="${root.dir}/build/licenses" />
		<property name="build.repast.src" value="${root.dir}/build/repastj/src" />
		<property name="build.repast.dest" value="${root.dir}/build/repastj/classes" />
		<property name="build.ext.src" value="${root.dir}/build/extensions/src" />
		<property name="build.ext.dest" value="${root.dir}/build/extensions/classes" />
		<property name="build.demos.src" value="${root.dir}/build/demo/src" />
		<property name="build.demos.dest" value="${root.dir}/build/demo/classes" />
		<property name="build.test.src" value="${root.dir}/build/test/src" />
		<property name="build.test.dest" value="${root.dir}/build/test/classes" />
		<property name="build.test.reports" value="${root.dir}/build/test/reports" />
		<property name="build.model" value="${root.dir}/build/models" />
		<property name="build.doc" value="${root.dir}/build/docs" />

		<!-- Define the distribution directories -->
		<property name="dist.root" value="${root.dir}/dist/repast" />
		<property name="sourcedist.dir" value="${dist.root}/${name}-${version}/${name}-${version}" />
		<property name="compiledist.dir" value="${dist.root}/${name}-${version}-compiled/${name}-${version}" />
	</target>

	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target name="usage">
		<echo message="" />
		<echo message="" />
		<echo message="repast build control" />
		<echo message="-------------------------------------------------------------" />
		<echo message="" />
		<echo message=" available targets are:" />
		<echo message="" />
		<echo message="   all        --> builds all the jars in ./build" />
		<echo message="   repast    --> builds the repast.jar file in ./build" />
		<echo message="   extensions --> builds the repastx.jar file in ./build" />
		<echo message="   demos      --> builds the demos.jar file in ./build" />
		<echo message="   compiledist--> creates the compiled distribution in ./dist" />
		<echo message="   sourcedist --> creates the source distribution in ./dist" />
		<echo message="   api        --> generates repast API docs in ./doc/api" />
		<echo message="   clean      --> restores distribution to original state" />
		<echo message="   usage      --> (default) displays build menu" />
		<echo message="" />
		<echo message=" See the comments inside the build.xml file for more details." />
		<echo message="-------------------------------------------------------------" />
		<echo message="" />
		<echo message="" />
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the build directory                                        -->
	<!-- =================================================================== -->
	<target name="prepare" depends="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.lib}" />
		<copy todir="${build.lib}">
			<fileset dir="${lib.dir}" excludes="*.dll standalone-compiler.jar" />
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the repast source code                                    -->
	<!-- =================================================================== -->
	<target name="prepare-repast" depends="prepare">
		<mkdir dir="${build.repast.src}" />
		<mkdir dir="${build.repast.dest}" />

		<copy todir="${build.repast.src}" includeEmptyDirs="false">
			<fileset dir="${src.dir}" excludes="**/CVS/**/*"/>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Prepares the extensions code                                        -->
	<!-- =================================================================== -->
	<!--<target name="prepare-ext" depends="prepare">
		<mkdir dir="${build.ext.src}" />
		<mkdir dir="${build.ext.dest}" />

		<copy todir="${build.ext.src}">
			<fileset dir="${ext.dir}" />
		</copy>

	</target> -->

	<!-- =================================================================== -->
	<!-- Prepares the examples code                                          -->
	<!-- =================================================================== -->
	<target name="prepare-demos" depends="prepare">
		<mkdir dir="${build.demos.dest}" />

		<copy todir="${build.demos.src}/..">
			<fileset dir="${demos.dir}" />
		</copy>
	</target>

	<!-- ================================================================== -->
	<!-- Prepares the test code											  -->
	<!-- ================================================================== -->
	<target name="prepare-tests" depends="prepare">
		<mkdir dir="${build.test.src}" />
		<mkdir dir="${build.test.dest}" />
		<mkdir dir="${build.test.reports}" />

		<copy todir="${build.test.src}">
			<fileset dir="${test.dir}" />
		</copy>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the repast source code                                    -->
	<!-- =================================================================== -->
	<target name="compile-repast" depends="prepare-repast">
		<!-- copy resource files -->
		<copy todir="${build.repast.dest}">
			<fileset dir="${build.repast.src}" excludes="**/*.java" />
		</copy>

		<javac srcdir="${build.repast.src}" destdir="${build.repast.dest}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}">
			<classpath>
				<fileset dir="${build.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the demos directory                                        -->
	<!-- =================================================================== -->
	<target name="compile-demos" depends="prepare-demos">
		<!-- copy resource files -->
		<copy todir="${build.demos.dest}">
			<fileset dir="${build.demos.src}" excludes="**/*.java" />
		</copy>

		<javac srcdir="${build.demos.src}" destdir="${build.demos.dest}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}">
			<classpath>
				<pathelement path="${build.repast.dest}" />
				<fileset dir="${build.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Compiles the test directory                                        -->
	<!-- =================================================================== -->
	<target name="compile-test" depends="repast, prepare-tests, demos">
		<!-- copy resource files -->
		<echo message="Compiling the unit tests"/>
		<copy todir="${build.test.dest}">
			<fileset dir="${build.test.src}" excludes="**/*.java" />
		</copy>

		<javac srcdir="${build.test.src}" destdir="${build.test.dest}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}">
			<classpath>
				<pathelement path="${build.repast.dest}" />
				<fileset dir="${build.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Run the unit tests and store results in ./build                     -->
	<!-- =================================================================== -->
	<target name="test" depends="compile-test">
		<jar jarfile="${build.dir}/${name}-test.jar" basedir="${build.test.dest}" includes="**"/>
		<junit printsummary="yes" haltonfailure="no">
			<classpath>
				<pathelement path="${build.dir}/${name}.jar" />
				<pathelement path="${build.test.dest}" />
				<fileset dir="${build.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>

			<formatter type="xml" />
			<formatter type="plain" />
			<batchtest fork="yes" todir="${build.test.reports}">
				<fileset dir="${build.test.src}">
					<include name="**/*Test.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>


	<!-- =================================================================== -->
	<!-- Creates the repast.jar in ./build                                  -->
	<!-- =================================================================== -->
	<target name="repast" depends="compile-repast">
		<jar jarfile="${build.dir}/${name}.jar" basedir="${build.repast.dest}" includes="**">
			<manifest>
				<attribute name="Main-Class" value="uchicago.src.sim.engine.SimInit" />
				<attribute name="Class-Path" value="repast-demos.jar lib/asm.jar lib/beanbowl.jar lib/colt.jar lib/commons-collections.jar lib/commons-logging.jar lib/geotools_repast.jar lib/jakarta-poi.jar lib/jep-2.24.jar lib/jgap.jar lib/jh.jar lib/jode-1.1.2-pre.jar lib/joone.jar lib/JTS.jar lib/log4j-1.2.8.jar lib/OpenForecast-0.4.0.jar lib/openmap.jar lib/plot.jar lib/ProActive.jar lib/repastpy.jar lib/trove.jar lib/mediaplayer.jar lib/multiplayer.jar lib/jmf.jar lib/violinstrings-1.0.2.jar" />
			</manifest>
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the repastx.jar in ./build                                 -->
	<!-- =================================================================== -->
	<!--<target name="ext" depends="compile-ext">
		<jar jarfile="${build.dir}/${name}x.jar" basedir="${build.ext.dest}" includes="**" />
	</target>-->

	<!-- =================================================================== -->
	<!-- Creates the examples.jar in ./build                                 -->
	<!-- =================================================================== -->
	<target name="demos" depends="compile-demos">
		<jar jarfile="${build.dir}/repast-demos.jar" basedir="${build.demos.dest}" includes="**">

		</jar>
	</target>


	<!-- =================================================================== -->
	<!-- Build all jars in ./build                                           -->
	<!-- =================================================================== -->
	<target name="all" depends="repast, demos, test" />

	<!-- =================================================================== -->
	<!-- Creates the API documentation in ./doc/api/                         -->
	<!-- =================================================================== -->
	<target name="api" depends="prepare-repast, prepare-demos">
		<javadoc packagenames="${packages}" sourcepath="${build.repast.src}" destdir="${doc.apidocs}" author="true" version="true" use="true" breakiterator="yes" splitindex="true" noindex="false" windowtitle="${Name} API Documentation" doctitle="&lt;font face='Verdana,Arial,Helvetica,Sans-Serif'>the ${Name} agent-based simulation toolkit&lt;/font>">
			<classpath>
				<pathelement path="${build.repast.dest}" />
				<fileset dir="${build.lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Replace all sequences of 4 spaces in .java files with a tab         -->
	<!-- =================================================================== -->
	<target name="addTabsWithLength4" depends="init">
		<fixcrlf srcdir="${root.dir}" tab="add" tablength="4" includes="**/*.java" />
	</target>

	<!-- =================================================================== -->
	<!-- Replace all tabs in .java files with a sequence of 4 spaces         -->
	<!-- =================================================================== -->
	<target name="removeTabsWithLength4" depends="init">
		<fixcrlf srcdir="${root.dir}" tab="remove" tablength="4" includes="**/*.java" />
	</target>

	<!-- =================================================================== -->
	<!-- Build compiled distribution in ./dist                               -->
	<!-- =================================================================== -->
	<target name="preparedist" depends="all, api">
		<mkdir dir="${dist.root}"/>	
		<mkdir dir="${dist.root}/repastj"/>
		<mkdir dir="installers"/>
		<copy todir="${dist.root}/repastj/lib">
			<fileset dir="${build.lib}"/>
		</copy>	
		<copy todir="${dist.root}/repastj/src">
			<fileset dir="${build.repast.src}"/>
		</copy>
		<copy todir="${dist.root}/repastj">
			<fileset dir="${build.dir}" includes="*.jar"/>
		</copy>
		<copy todir="${dist.root}/repastj/test">
			<fileset dir="${build.test.src}"/>
		</copy>
		<copy todir="${dist.root}/repastj/demo">
			<fileset dir="${build.demos.src}/.." excludes="**/classes/**/*"/>
		</copy>
		<copy todir="${dist.root}/repastj/docs/licenses">
			<fileset dir="licenses"/>
		</copy>
		<copy todir="${dist.root}/repastj/docs">
			<fileset dir="${doc.dir}"/>
		</copy>
		<copy todir="${dist.root}/repastj/docs/api">
			<fileset dir="${doc.apidocs}"/>
		</copy>
		<copy todir="${dist.root}/repastj/" file="${root.dir}/build.xml"/>
		<copy todir="${dist.root}/repastj" file="${root.dir}/COMPILE"/>
		<copy todir="${dist.root}/repastj" file="${root.dir}/readme.html"/>
		<copy todir="${dist.root}/repastj" file="${root.dir}/NEWS"/>	
		<copy todir="${dist.root}/repastj/distfiles">
			<fileset dir="distfiles"/>
		</copy>
		<copy todir="${dist.root}" file="distfiles/repast.ico"/>
			
	</target>
	
	<target name="compiledist" depends="preparedist, api">
		<taskdef name="izpack" classpath="distfiles/standalone-compiler.jar" classname="com.izforge.izpack.ant.IzPackTask"/>
		<zip zipfile="installers/${Name}_${version}.zip" basedir="${dist.root}/.." whenempty="create" excludes="**/*.zip"/>
		<izpack input="distfiles/install.xml" output="installers/RepastJ_3.0_install.jar" installerType="standard" basedir="${dist.root}"/>
	</target>
<!--
	<target name="maclaunch">
		<delete dir="dist/repast/repastj/RepastJ.app"/>
		<taskdef name="jarbundler" classpath="distfiles/jarbundler-1.4.jar" classname="com.loomcom.ant.tasks.jarbundler.JarBundler"/>
		<jarbundler dir="dist/repast/repastj" name="RepastJ" mainclass="uchicago.src.sim.engine.SimInit" jars="foo.jar" icon="distfiles/repast.icns" stubfile="distfiles/JavaApplicationStub" bundleid="uchicago.src.sim.enging.SimInit">	
	<extraclasspathfileset dir="../../../../">
		<include name="repast.jar"/>
	</extraclasspathfileset>
		</jarbundler>
	</target>
-->	
	<!-- =================================================================== -->
	<!-- Clean restores the distribution to original state                   -->
	<!-- =================================================================== -->
	<target name="clean" depends="init">
		<delete dir="${build.dir}" />
		<delete dir="${dist.root}" />
		<delete dir="${doc.apidocs}" />
		<delete dir="installers"/>
	</target>
</project>

<!-- End of file -->
